"""

"""

# Copyright 2018-2020 CNRS

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import annotations
from typing import Optional, List, Any, Dict


class Filter:

    def __init__(self, operation: str, parameter: Optional[str]=None, value: Optional[str]=None):
        self.operation = operation
        self.parameter = parameter
        self.value = value

    def serialize(self):
        data = {
            "op": self.operation
        }
        if self.parameter:
            data["parameter"] = self.parameter
        if self.value:
            data["value"] = self.value
        return data


class QueryProperty:

    def __init__(
        self,
        path: str,
        name: Optional[str]=None,
        filter: Optional[Filter]=None,
        sorted: bool=False,
        required: bool=False,
        ensure_order: bool=False,
        properties: Optional[List[QueryProperty]]=None,
        type_filter: Optional[str]=None,
        reverse: bool=False,
        expect_single: bool=False
    ):
        self.path = path
        self.name = name
        self.filter = filter
        self.sorted = sorted
        self.required = required
        self.ensure_order = ensure_order
        self.properties = properties or []
        self.type_filter = type_filter
        self.reverse = reverse
        self.expect_single = expect_single

    def __repr__(self):
        return f"QueryProperty({self.path}, name={self.name})"

    def add_property(self, property: QueryProperty):
        assert isinstance(property, QueryProperty)
        self.properties.append(property)

    def serialize(self) -> Dict[str, Any]:
        data: Dict[str, Any] = {
            "path": self.path,
        }
        if self.name:
            data["propertyName"] = self.name
        if self.filter:
            data["filter"] = self.filter.serialize()
        if self.sorted:
            data["sort"] = True
        if self.required:
            data["required"] = True
        if self.ensure_order:
            data["ensureOrder"] = True
        if self.properties:
            data["structure"] = [
                property.serialize() for property in self.properties
            ]
        if self.type_filter or self.reverse:
            data["path"] = {
                "@id": data["path"]
            }
            if self.type_filter:
                data["path"]["typeFilter"] = {"@id": self.type_filter}
            if self.reverse:
                data["path"]["reverse"] = True
        if self.expect_single:
            data["singleValue"] = "FIRST"
        return data


class Query:

    def __init__(
        self,
        node_type: str,
        label: str,
        space: Optional[str]=None,
        properties: Optional[List[QueryProperty]]=None
    ):
        self.node_type = node_type
        self.label = label
        self.space = space
        self.properties = [
            QueryProperty("@id", filter=Filter("EQUALS", parameter="id"))
        ]
        if space:
            self.properties.append(
                QueryProperty("https://core.kg.ebrains.eu/vocab/meta/space",
                              name="query:space",
                              filter=Filter("EQUALS", value=self.space))
            )
        else:
            self.properties.append(
                QueryProperty("https://core.kg.ebrains.eu/vocab/meta/space",
                              name="query:space")
            )
        if properties:
            self.properties.extend(properties)

    def add_property(self, property: QueryProperty):
        assert isinstance(property, QueryProperty)
        self.properties.append(property)

    def serialize(self) -> Dict[str, Any]:
        query = {
            "@context": {
                "@vocab": "https://core.kg.ebrains.eu/vocab/query/",
                "query": "https://schema.hbp.eu/myQuery/",
                "propertyName": {
                    "@id": "propertyName",
                    "@type": "@id"
                },
                "merge": {
                   "@type": "@id",
                   "@id": "merge"
                },
                "path": {
                    "@id": "path",
                    "@type": "@id"
                }
            },
            "meta": {
                "type": self.node_type,
                "name": self.label,
                "description": "Automatically generated by fairgraph"
            },
            "structure": [property.serialize() for property in self.properties]
        }
        return query

# todo: I think only one property can have "sort": True - need to check this
