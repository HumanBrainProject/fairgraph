"""
Structured information on a file instances.
"""

# this file was auto-generated then hand-modified

import os
import hashlib
import mimetypes
from datetime import datetime
from fairgraph.base_v3 import KGObjectV3
from fairgraph.fields import Field
from .hash import Hash
from .content_type import ContentType
from ..miscellaneous.quantitative_value import QuantitativeValue
from ...controlledterms.unit_of_measurement import UnitOfMeasurement

mimetypes.init()


def sha1sum(filename):
    BUFFER_SIZE = 128*1024
    h = hashlib.sha1()
    with open(filename, 'rb') as fp:
        while True:
            data = fp.read(BUFFER_SIZE)
            if not data:
                break
            h.update(data)
    return h.hexdigest()


class File(KGObjectV3):
    """
    Structured information on a file instances.
    """
    default_space = "files"
    type = ["https://openminds.ebrains.eu/core/File"]
    context = {
        "schema": "http://schema.org/",
        "kg": "https://kg.ebrains.eu/api/instances/",
        "vocab": "https://openminds.ebrains.eu/vocab/",
        "terms": "https://openminds.ebrains.eu/controlledTerms/",
        "core": "https://openminds.ebrains.eu/core/"
    }
    fields = [
        Field("content", str, "vocab:content", multiple=False, required=False,
              doc="Something that is contained."),
        Field("file_repository", "openminds.core.FileRepository", "vocab:fileRepository", multiple=False, required=False,
              doc="no description available"),
        Field("format", "openminds.core.ContentType", "vocab:format", multiple=False, required=False,
              doc="Method of digitally organizing and structuring data or information."),
        Field("hash", "openminds.core.Hash", "vocab:hash", multiple=False, required=False,
              doc="Term used for the process of converting any data into a single value. Often also directly refers to the resulting single value."),
        Field("iri", str, "vocab:IRI", multiple=False, required=True,
              doc="Stands for Internationalized Resource Identifier which is an internet protocol standard that builds on the URI protocol, extending the set of permitted characters to include Unicode/ISO 10646."),
        Field("is_part_ofs", "openminds.core.FileBundle", "vocab:isPartOf", multiple=True, required=False,
              doc="Reference to the ensemble of multiple things or beings."),
        Field("name", str, "vocab:name", multiple=False, required=True,
              doc="Word or phrase that constitutes the distinctive designation of a being or thing."),
        Field("special_usage_role", "openminds.controlledterms.FileUsageRole", "vocab:specialUsageRole", multiple=False, required=False,
              doc="Particular function of something when it is used."),
        Field("storage_size", "openminds.core.QuantitativeValue", "vocab:storageSize", multiple=False, required=False,
              doc="Quantitative value defining how much disk space is used by an object on a computer system."),

    ]
    existence_query_fields = ("hash",)

    @classmethod
    def from_local_file(cls, relative_path):
        cls.set_strict_mode(False)
        obj = cls(
            name=relative_path,
            storage_size=QuantitativeValue(value=float(
                os.stat(relative_path).st_size), unit=UnitOfMeasurement(name="bytes")),
            hash=Hash(algorithm="SHA1", digest=sha1sum(relative_path)),
            format=ContentType(name=mimetypes.guess_type(relative_path)[0])
            # todo: query ContentTypes since that contains additional, EBRAINS-specific content types
        )
        cls.set_strict_mode(True)
        return obj

    @classmethod
    def generate_query(cls, query_type, space, client, resolved=False, top_level=True,
                       field_names_used=None, parents=None):
        if query_type == "simple":
            return {'@context': {'@vocab': 'https://core.kg.ebrains.eu/vocab/query/',
                                 'query': 'https://schema.hbp.eu/myQuery/',
                                 'propertyName': {'@id': 'propertyName', '@type': '@id'},
                                 'merge': {'@type': '@id', '@id': 'merge'},
                                 'path': {'@id': 'path', '@type': '@id'}},
                    'meta': {'type': 'https://openminds.ebrains.eu/core/File',
                             'name': f'fg-File-simple-{space}',
                             'description': 'Automatically generated by fairgraph, with manual tweaking'},
                    'structure': [{'path': '@id', 'filter': {'op': 'equals', 'parameter': 'id'}},
                                  {'path': 'https://core.kg.ebrains.eu/vocab/meta/space',
                                   'filter': {'op': 'EQUALS', 'value': space},
                                   'propertyName': 'query:space'},
                                  {'path': '@type'},
                                  {'propertyName': 'vocab:content',
                                   'path': 'https://openminds.ebrains.eu/vocab/content',
                                   'filter': {'op': 'CONTAINS', 'parameter': 'content'}},
                                  {'propertyName': 'vocab:fileRepository',
                                   'path': 'https://openminds.ebrains.eu/vocab/fileRepository',
                                   'structure': [{'path': '@id'}, {'path': '@type'}],
                                   'filter': {'op': 'CONTAINS', 'parameter': 'file_repository'}},
                                  {'propertyName': 'vocab:format',
                                   'path': 'https://openminds.ebrains.eu/vocab/format',
                                   'structure': [{'path': '@id'}, {'path': '@type'}],
                                   'filter': {'op': 'CONTAINS', 'parameter': 'format'}},
                                  {'propertyName': 'vocab:hash',
                                   'path': 'https://openminds.ebrains.eu/vocab/hash',
                                   'required': True,
                                   'structure': [{'path': '@type'},
                                                 {'path': 'https://openminds.ebrains.eu/vocab/algorithm'},
                                                 {'path': 'https://openminds.ebrains.eu/vocab/digest',
                                                  'filter': {'op': 'EQUALS', 'parameter': 'hash'}}],
                                  },
                                  {'propertyName': 'vocab:IRI',
                                   'path': 'https://openminds.ebrains.eu/vocab/IRI',
                                   'filter': {'op': 'CONTAINS', 'parameter': 'iri'}},
                                  {'propertyName': 'vocab:isPartOf',
                                   'path': 'https://openminds.ebrains.eu/vocab/isPartOf',
                                   'ensureOrder': True,
                                   'structure': [{'path': '@id'}, {'path': '@type'}],
                                   'filter': {'op': 'CONTAINS', 'parameter': 'is_part_ofs'}},
                                  {'propertyName': 'vocab:name',
                                   'path': 'https://openminds.ebrains.eu/vocab/name',
                                   'sort': True,
                                   'required': True,
                                   'filter': {'op': 'CONTAINS', 'parameter': 'name'}},
                                  {'propertyName': 'vocab:specialUsageRole',
                                   'path': 'https://openminds.ebrains.eu/vocab/specialUsageRole',
                                   'structure': [{'path': '@id'}, {'path': '@type'}],
                                   'filter': {'op': 'CONTAINS', 'parameter': 'special_usage_role'}},
                                  {'propertyName': 'vocab:storageSize',
                                   'path': 'https://openminds.ebrains.eu/vocab/storageSize',
                                   'structure': [{'path': '@type'},
                                                 {'path': 'https://openminds.ebrains.eu/vocab/value'},
                                                 {'path': 'https://openminds.ebrains.eu/vocab/uncertainty'},
                                                 {'path': 'https://openminds.ebrains.eu/vocab/typeOfUncertainty'},
                                                 {'path': 'https://openminds.ebrains.eu/vocab/unit'}],
                                   'filter': {'op': 'CONTAINS', 'parameter': 'storage_size'}}]}
        else:
            return super().generate_query(query_type, space, client, resolved=resolved, top_level=top_level,
                                          field_names_used=field_names_used, parents=parents)