"""
{{docstring}}
"""

# this file was auto-generated

from fairgraph import {{ base_class }}, IRI
from fairgraph.properties import Property

{{preamble}}


class {{ class_name }}({{ base_class }}):
    """
    {{ docstring }}
    """
    {%- if default_space %}
    default_space = "{{ default_space }}"
    {%- endif %}
    type_ = "{{ openminds_type }}"
    context = {
        "schema": "http://schema.org/",
        "kg": "https://kg.ebrains.eu/api/instances/",
        "vocab": "https://openminds.ebrains.eu/vocab/",
        "terms": "https://openminds.ebrains.eu/controlledTerms/",
        "core": "https://openminds.ebrains.eu/core/"
    }
    properties = [
        {% for prop in properties -%}
        Property("{{prop.name}}", {{prop.type_str}}, "{{prop.iri}}",
            {%- if prop.allow_multiple %}multiple={{prop.allow_multiple}},{% endif -%}
            {%- if prop.required %}required={{prop.required}},{% endif -%}
            doc="{{prop.doc}}"),
        {% endfor %}
        {% for prop in reverse_properties -%}
        Property(
            "{{prop.name}}", {{prop.type_str}},
            {%- if prop.iri is iterable and (prop.iri is not string and prop.iri is not mapping) %}
                ["{{prop.iri|join('", "')}}"],
            {% else %}
                "{{prop.iri}}",
            {% endif -%}
            {%- if prop._forward_name_python is iterable and (prop._forward_name_python is not string and prop._forward_name_python is not mapping) %}
            reverse=["{{prop._forward_name_python|join('", "')}}"],
            {% else %}
            reverse="{{prop._forward_name_python}}",
            {% endif -%}
            {%- if prop.allow_multiple %}multiple={{prop.allow_multiple}},{% endif -%}
            {%- if prop.required %}, required={{prop.required}},{% endif -%}
            doc="{{prop.doc}}"),
        {% endfor %}
    ]
    {%- if aliases %}
    aliases = {{ aliases }}
    {%- endif %}
    {%- if default_space %}
    existence_query_properties = {{ existence_query_properties }}
    {%- endif %}

    def __init__(self {%- for arg in constructor_arguments -%}, {{arg}}=None{%- endfor -%}, id=None, data=None, space=None, scope=None):
        return super().__init__({{ standard_init_properties }}data=data {%- for arg in constructor_arguments -%}, {{arg}}={{arg}}{%- endfor -%})
{{ additional_methods }}
